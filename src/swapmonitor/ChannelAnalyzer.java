/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChannelAnalyzer.java
 *
 * Created on Feb 23, 2011, 2:08:57 PM
 */
package swapmonitor;

import javax.swing.*;
import java.sql.*;
import defaultclass.*;
import java.util.Vector;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Dimension;

/**
 *
 * @author kamol
 */
public class ChannelAnalyzer extends javax.swing.JFrame {

    SQL5484 sql5484 = new SQL5484();
    TelnetResult6900 telnet = new TelnetResult6900();
    Vector SiteName, Bsc_IP, Server_IP, channel, status, faultySite;
    ImageIcon working;
    private int len, TRXPosition, TSPosition, ChannelPosition, StatusPosition;

    /** Creates new form ChannelAnalyzer */
    public ChannelAnalyzer() {
        super("Channel Analyzer");
        setResizable(false);
        initComponents();
        working = new ImageIcon("Other\\working.gif");
        try {
            SiteName = new Vector();
            Bsc_IP = new Vector();
            Server_IP = new Vector();
            if (!SiteName.isEmpty()) {
                SiteName.removeAllElements();
                Bsc_IP.removeAllElements();
                Server_IP.removeAllElements();
            }
            String sqlquery = "select * from rtinfo.dbo.h_site_bsc where SiteName in(select SiteName from rtinfo.dbo.swapmonitorsite)";
            ResultSet resultset = sql5484.SQL5484(sqlquery);

            while (resultset.next()) {
                SiteName.addElement(resultset.getString("SiteName"));
                Bsc_IP.addElement(resultset.getString("Bsc_IP"));
                Server_IP.addElement(resultset.getString("Server_IP"));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTA = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Click Start to Continue");

        JTA.setColumns(20);
        JTA.setRows(5);
        jScrollPane1.setViewportView(JTA);

        jButton2.setText("Close the Frame");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(193, 193, 193))
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //int siteNo = 0;
       new performedTask().start();
       infoLabel.setIcon(working);
            infoLabel.setText("Working");
    }//GEN-LAST:event_jButton1ActionPerformed

   class performedTask extends Thread{
       
       public void run(){
        try {
            channel = new Vector();
            status = new Vector();
            faultySite = new Vector();
            if (!channel.isEmpty()) {
                channel.removeAllElements();
                status.removeAllElements();
                faultySite.removeAllElements();
            }
            
            JTA.setText("Site" + "\t" + "TotalCH" + "\t" + "WCH" + "\t" + "FaultyCH" + "\t" + "FPercentage");
            JTA.setText(JTA.getText() + "\n" + "------" + "\t" + "----------" + "\t" + "------" + "\t" + "------" + "\t" + "---------------" + "\n");

            for (int siteNo = 0; siteNo < SiteName.size(); siteNo++) {

                String currentSite = (String) SiteName.elementAt(siteNo);
                String currentBSC_IP = (String) Bsc_IP.elementAt(siteNo);
                String currentServer_IP = (String) Server_IP.elementAt(siteNo);

                String Command = "DSP CHNSTAT: OBJTYPE=SITE, IDTYPE=BYNAME, BTSNAME=\"" + currentSite + "\";";
                String S = telnet.TelnetResult6900(Command, currentBSC_IP, currentServer_IP);
                S = S.substring(S.indexOf("Display channel state"), S.indexOf("Number of results") + 17);
                String[] S1 = S.split("\n");
                TSPosition = S1[2].indexOf("Channel No");
                StatusPosition = S1[2].indexOf("Sub Channel Status");

                S1 = S.split("END");

                for (int j = 0; j < S1.length; j++) {
                    try {
                        String S2 = S1[j].substring(S1[j].indexOf("Display channel state"), S1[j].indexOf("To be continued"));
                        String[] S3 = S2.split("\n");
                        len = S3.length;

                        for (int i = 4; i < len; i++) {
                            //System.out.println(S3[i]);
                            channel.addElement(S3[i].substring(TSPosition, TSPosition + 3).trim());
                            status.addElement(S3[i].substring(StatusPosition, StatusPosition + 12).trim());
                        }

                    } catch (Exception e1) {
                        String S2 = S1[j].substring(S1[j].indexOf("Display channel state"), S1[j].indexOf("Number of results"));
                        String[] S3 = S2.split("\n");
                        for (int i = 4; i < S3.length - 1; i++) {
                            //System.out.println(S3[i]);
                            channel.addElement(S3[i].substring(TSPosition, TSPosition + 3).trim());
                            status.addElement(S3[i].substring(StatusPosition, StatusPosition + 12).trim());
                        }
                    }

                }

                int totalChannel = channel.size();
                int faultyChannel = 0, workingChannel = 0;
                for (int i = 0; i < channel.size(); i++) {
                    String currentStatus = (String) status.elementAt(i);
                    if (currentStatus.contains("Idle") || currentStatus.contains("Working")) {
                        workingChannel = workingChannel + 1;
                    } else {
                        faultyChannel = faultyChannel + 1;
                    }
                }
                System.out.println(totalChannel + "   : " + workingChannel + "  : " + faultyChannel);
                float faultyPercent = (faultyChannel * 100) / totalChannel;
                JTA.setText(JTA.getText() + currentSite + "\t" + totalChannel + "\t" + workingChannel + "\t" + faultyChannel + "\t" + faultyPercent + "\n");

                sleep(500);
                //if (faultyChannel > 0) {

                //JTA.setText(currentSite+"\t"+totalChannel+"\t"+workingChannel+"\t"+faultyChannel+"\t"+faultyPercent);
                //}


            }
            infoLabel.setIcon(null);
            infoLabel.setText("Complete !!");

        } catch (Exception e) {
            e.printStackTrace();
        }
       }
        
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ChannelAnalyzer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea JTA;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
